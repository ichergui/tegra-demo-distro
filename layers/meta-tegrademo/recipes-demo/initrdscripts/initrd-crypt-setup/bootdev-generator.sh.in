#!/bin/sh
#
# Unit generator for unlocking and mounting the
# root device.  Generates output similar to
# systemd-cryptsetup-generator, but with information
# derived from the kernel command line rather
# than /etc/crypttab.
#
normaldir="$1"
earlydir="$2"
latedir="$3"

# Skip generation of units if a root device is
# explicitly provided on the command line.
# Otherwise, extract the boot-slot suffix
# so we know which units to generate.
slotsfx=
rootrw=
rootflags=
foundslotsfx="no"
for bootarg in $(cat /proc/cmdline); do
    case "$bootarg" in
	root=*) exit 0 ;;
    boot.slot_suffix=*) slotsfx="${bootarg##boot.slot_suffix=}"; foundslotsfx="yes" ;;
	ro) rootrw=no ;;
	rw) rootrw=yes ;;
	rootflags=*) [ -z "$rootflags" ] || rootflags="$rootflags ";
		     rootflags="$rootflags${bootarg##rootflags=}" ;;
    esac
done

if [ "$foundslotsfx" != "yes" ]; then
    # This variable file contains a type (should be 6) followed by the value (should be 0 or 1)
    bcdata=$(echo $(hexdump -n 8 -e '2/4 " %u"' /sys/firmware/efi/efivars/BootChainOsCurrent-781e084c-a330-417c-b678-38e696380cb9 2>/dev/null))
    if [ "$(echo "$bcdata" | cut -d' ' -f1)" = "6" ]; then
	slotnum=$(echo "$bcdata" | cut -d' ' -f2)
	[ "$slotnum" != "1" ] || slotsfx="_b"
    fi
fi

if [ -n "$rootrw" ]; then
   if [ "$rootrw" = "yes" ]; then
       rootrw="rw"
   else
       rootrw="ro"
   fi
   if [ -z "$rootflags" ]; then
       rootflags="$rootrw"
   else
       haveflag=
       for flag in $rootflags; do
	   case "$flag" in
	       ro|rw) haveflag=yes;
		      break;;
	   esac
       done
       [ -n "$haveflag" ] || rootflags="$rootflags $rootrw"
   fi
fi

cat >"$normaldir/sysroot.mount" <<EOF
# Automatically generated by bootdev-generator

[Unit]
Description=root mount point from Tegra boot slot
SourcePath=/proc/cmdline
ConditionPathExists=/etc/initrd-release
Before=initrd-root-fs.target
Wants=initrd-root-fs.target
Requires=systemd-cryptsetup@APP$slotsfx.service
After=blockdev@dev-mapper-APP$slotsfx.target systemd-cryptsetup@APP$slotsfx.service initrd-root-device.target

[Mount]
Where=/sysroot
What=/dev/mapper/APP$slotsfx
Options=$rootflags
EOF

cat >"$normaldir/systemd-cryptsetup@APP$slotsfx.service" <<EOF
# Automatically generated by bootdev-generator

[Unit]
Description=Cryptography setup for %I
SourcePath=/proc/cmdline
DefaultDependencies=no
IgnoreOnIsolate=true
After=cryptsetup-pre.target dmc-passphrase.service
Before=blockdev@dev-mapper-%i.target
Wants=blockdev@dev-mapper-%i.target
Before=cryptsetup.target initrd-root-device.target
Wants=initrd-root-device.target
RequiresMountsFor=/run
BindsTo=dev-disk-by\x2dpartlabel-crypt\x2dAPP$slotsfx.device
After=dev-disk-by\x2dpartlabel-crypt\x2dAPP$slotsfx.device
Before=umount.target

[Service]
Type=oneshot
RemainAfterExit=yes
TimeoutSec=0
KeyringMode=shared
OOMScoreAdjust=500
ExecStart=@NONARCH_BASE_LIBDIR@/systemd/systemd-cryptsetup attach APP$slotsfx /dev/disk/by-partlabel/crypt-APP$slotsfx /run/crypt/passphrase luks,x-initrd.attach
ExecStop=@NONARCH_BASE_LIBDIR@/systemd/systemd-cryptsetup detach APP$slotsfx
EOF

mkdir -p "$normaldir/dev-mapper-APP$slotsfx.device.d"
cat >"$normaldir/dev-mapper-APP$slotsfx.device.d/40-device-timeout.conf" <<EOF
# Automatically generated by bootdev-generator

[Unit]
JobTimeoutSec=0
EOF

mkdir -p "$normaldir/dev-mapper-APP$slotsfx.device.requires"
ln -sf "../systemd-cryptsetup@APP$slotsfx.service" "$normaldir/dev-mapper-APP$slotsfx.device.requires/"
mkdir -p "$normaldir/cryptsetup.target.requires"
ln -sf "../systemd-cryptsetup@APP$slotsfx.service" "$normaldir/cryptsetup.target.requires"
mkdir -p "$normaldir/initrd-root-device.target.requires"
ln -sf "../systemd-cryptsetup@APP$slotsfx.service" "$normaldir/initrd-root-device.target.requires"
mkdir -p "$normaldir/initrd-root-fs.target.requires"
ln -sf "../sysroot.mount" "$normaldir/initrd-root-fs.target.requires"
mkdir -p /run/bootdev
ln -sf /dev/mapper/APP$slotsfx /run/bootdev/rootfs-device
exit 0
